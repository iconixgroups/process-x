{"ast":null,"code":"import { mapActions } from 'vuex';\nimport { mxGraph, mxRubberband, mxKeyHandler, mxUtils, mxEvent } from 'mxgraph/js/mxClient';\nexport default {\n  name: 'ProcessDesign',\n  data() {\n    return {\n      graph: null,\n      parent: null\n    };\n  },\n  mounted() {\n    this.initializeGraph();\n  },\n  methods: {\n    ...mapActions('design', ['designProcess']),\n    initializeGraph() {\n      this.graph = new mxGraph(this.$el.querySelector('#processDesignEditor'));\n      this.parent = this.graph.getDefaultParent();\n      this.graph.getModel().beginUpdate();\n      try {\n        // Example process design\n        const start = this.graph.insertVertex(this.parent, null, 'Start', 20, 20, 80, 30);\n        const step1 = this.graph.insertVertex(this.parent, null, 'Step 1', 200, 20, 80, 30);\n        const end = this.graph.insertVertex(this.parent, null, 'End', 380, 20, 80, 30);\n        this.graph.insertEdge(this.parent, null, '', start, step1);\n        this.graph.insertEdge(this.parent, null, '', step1, end);\n      } finally {\n        this.graph.getModel().endUpdate();\n        new mxRubberband(this.graph);\n        new mxKeyHandler(this.graph);\n      }\n    },\n    saveProcess() {\n      const encoder = new mxCodec();\n      const result = encoder.encode(this.graph.getModel());\n      const xml = mxUtils.getXml(result);\n      this.designProcess({\n        moduleId: this.$route.params.moduleId,\n        processType: 'BPMN',\n        details: xml\n      }).then(() => {\n        this.$emit('processDesigned');\n      }).catch(error => {\n        console.error('Failed to save process design:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mxGraph","mxRubberband","mxKeyHandler","mxUtils","mxEvent","name","data","graph","parent","mounted","initializeGraph","methods","$el","querySelector","getDefaultParent","getModel","beginUpdate","start","insertVertex","step1","end","insertEdge","endUpdate","saveProcess","encoder","mxCodec","result","encode","xml","getXml","designProcess","moduleId","$route","params","processType","details","then","$emit","catch","error","console"],"sources":["src/components/ProcessDesign.vue"],"sourcesContent":["<template>\n  <div class=\"process-design\">\n    <div class=\"editor-header\">\n      <h2>Process Design</h2>\n      <button @click=\"saveProcess\" class=\"save-button\">Save Process</button>\n    </div>\n    <div class=\"editor-container\">\n      <div id=\"processDesignEditor\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex';\nimport { mxGraph, mxRubberband, mxKeyHandler, mxUtils, mxEvent } from 'mxgraph/js/mxClient';\n\nexport default {\n  name: 'ProcessDesign',\n  data() {\n    return {\n      graph: null,\n      parent: null\n    };\n  },\n  mounted() {\n    this.initializeGraph();\n  },\n  methods: {\n    ...mapActions('design', ['designProcess']),\n    initializeGraph() {\n      this.graph = new mxGraph(this.$el.querySelector('#processDesignEditor'));\n      this.parent = this.graph.getDefaultParent();\n\n      this.graph.getModel().beginUpdate();\n      try {\n        // Example process design\n        const start = this.graph.insertVertex(this.parent, null, 'Start', 20, 20, 80, 30);\n        const step1 = this.graph.insertVertex(this.parent, null, 'Step 1', 200, 20, 80, 30);\n        const end = this.graph.insertVertex(this.parent, null, 'End', 380, 20, 80, 30);\n\n        this.graph.insertEdge(this.parent, null, '', start, step1);\n        this.graph.insertEdge(this.parent, null, '', step1, end);\n      } finally {\n        this.graph.getModel().endUpdate();\n        new mxRubberband(this.graph);\n        new mxKeyHandler(this.graph);\n      }\n    },\n    saveProcess() {\n      const encoder = new mxCodec();\n      const result = encoder.encode(this.graph.getModel());\n      const xml = mxUtils.getXml(result);\n\n      this.designProcess({\n        moduleId: this.$route.params.moduleId,\n        processType: 'BPMN',\n        details: xml\n      }).then(() => {\n        this.$emit('processDesigned');\n      }).catch(error => {\n        console.error('Failed to save process design:', error);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.process-design {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.editor-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n}\n\n.editor-container {\n  flex-grow: 1;\n  overflow: hidden;\n}\n\n.save-button {\n  padding: 5px 15px;\n  background-color: #5cb85c;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.save-button:hover {\n  background-color: #4cae4c;\n}\n</style>"],"mappings":"AAaA,SAAAA,UAAA;AACA,SAAAC,OAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,OAAA,EAAAC,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,eAAA;EACA;EACAC,OAAA;IACA,GAAAZ,UAAA;IACAW,gBAAA;MACA,KAAAH,KAAA,OAAAP,OAAA,MAAAY,GAAA,CAAAC,aAAA;MACA,KAAAL,MAAA,QAAAD,KAAA,CAAAO,gBAAA;MAEA,KAAAP,KAAA,CAAAQ,QAAA,GAAAC,WAAA;MACA;QACA;QACA,MAAAC,KAAA,QAAAV,KAAA,CAAAW,YAAA,MAAAV,MAAA;QACA,MAAAW,KAAA,QAAAZ,KAAA,CAAAW,YAAA,MAAAV,MAAA;QACA,MAAAY,GAAA,QAAAb,KAAA,CAAAW,YAAA,MAAAV,MAAA;QAEA,KAAAD,KAAA,CAAAc,UAAA,MAAAb,MAAA,YAAAS,KAAA,EAAAE,KAAA;QACA,KAAAZ,KAAA,CAAAc,UAAA,MAAAb,MAAA,YAAAW,KAAA,EAAAC,GAAA;MACA;QACA,KAAAb,KAAA,CAAAQ,QAAA,GAAAO,SAAA;QACA,IAAArB,YAAA,MAAAM,KAAA;QACA,IAAAL,YAAA,MAAAK,KAAA;MACA;IACA;IACAgB,YAAA;MACA,MAAAC,OAAA,OAAAC,OAAA;MACA,MAAAC,MAAA,GAAAF,OAAA,CAAAG,MAAA,MAAApB,KAAA,CAAAQ,QAAA;MACA,MAAAa,GAAA,GAAAzB,OAAA,CAAA0B,MAAA,CAAAH,MAAA;MAEA,KAAAI,aAAA;QACAC,QAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAF,QAAA;QACAG,WAAA;QACAC,OAAA,EAAAP;MACA,GAAAQ,IAAA;QACA,KAAAC,KAAA;MACA,GAAAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,mCAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}